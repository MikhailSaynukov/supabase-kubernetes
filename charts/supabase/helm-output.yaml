---
# Source: supabase/templates/auth/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-auth
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/templates/kong/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-kong
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/templates/meta/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-meta
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/templates/realtime/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-realtime
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/templates/rest/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-rest
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/templates/storage/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-storage
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/templates/studio/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supabase-supabase-studio
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
---
# Source: supabase/charts/database/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: supabase-database
  labels:
    app.kubernetes.io/name: database
    helm.sh/chart: database-10.13.15
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
  namespace: supabase
type: Opaque
data:
  postgresql-password: "UG9zdEdyZVNRTCFAIzEyMw=="
---
# Source: supabase/templates/auth/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-auth
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  GOTRUE_API_HOST: 0.0.0.0
  GOTRUE_API_PORT: "9999"
  GOTRUE_DB_DATABASE_URL: postgres://postgres:PostGreSQL!@#123@supabase-database.supabase.svc.cluster.local:5432/postgres?search_path=auth
  GOTRUE_DB_DRIVER: postgres
  GOTRUE_DISABLE_SIGNUP: "false"
  GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
  GOTRUE_EXTERNAL_PHONE_ENABLED: "false"
  GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
  GOTRUE_JWT_EXP: "3600"
  GOTRUE_JWT_SECRET: sTfSgSSCi80zJvdQugIg6S8Cd8klthKt0okIk27rN7muBH5Q59nh8+ribSep4+F+NlVMhZreh9BFxqZNah7KpQ==
  GOTRUE_MAILER_AUTOCONFIRM: "true"
  GOTRUE_MAILER_URLPATHS_CONFIRMATION: /auth/v1/verify
  GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: /auth/v1/verify
  GOTRUE_MAILER_URLPATHS_INVITE: /auth/v1/verify
  GOTRUE_MAILER_URLPATHS_RECOVERY: /auth/v1/verify
  GOTRUE_SITE_URL: http://studio.localhost
  GOTRUE_SMS_AUTOCONFIRM: "false"
  GOTRUE_SMTP_ADMIN_EMAIL: admin@example.com
  GOTRUE_SMTP_HOST: mail
  GOTRUE_SMTP_PASS: fake_mail_password
  GOTRUE_SMTP_PORT: "2500"
  GOTRUE_SMTP_SENDER_NAME: fake_sender
  GOTRUE_SMTP_USER: fake_mail_user
  GOTRUE_URI_ALLOW_LIST: ""
---
# Source: supabase/templates/db/initdb.config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: supabase-initdb
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
#   00-install-pgjwt.sh: |
#     #!/bin/bash
#     set -e
#     install_packages make git gcc
#     git clone https://github.com/michelp/pgjwt.git
#     cd pgjwt
#     make install
#     cd ..
#     git clone https://github.com/eulerto/wal2json.git
#     cd wal2json
#     make
#     make install
  01-initial-schema.sql: |
    -- Set up realtime
    create schema if not exists realtime;
    -- create publication supabase_realtime; -- defaults to empty publication
    create publication supabase_realtime;

    -- Supabase super admin
    create user supabase_admin;
    alter user  supabase_admin with superuser createdb createrole replication bypassrls;

    -- Extension namespacing
    create schema if not exists extensions;
    create extension if not exists "uuid-ossp"      with schema extensions;
    create extension if not exists pgcrypto         with schema extensions;
    create extension if not exists pgjwt            with schema extensions;

    -- Set up auth roles for the developer
    create role anon                nologin noinherit;
    create role authenticated       nologin noinherit; -- "logged in" user: web_user, app_user, etc
    create role service_role        nologin noinherit bypassrls; -- allow developers to create JWT's that bypass their policies

    create user authenticator noinherit;
    grant anon              to authenticator;
    grant authenticated     to authenticator;
    grant service_role      to authenticator;
    grant supabase_admin    to authenticator;

    grant usage                     on schema public to postgres, anon, authenticated, service_role;
    alter default privileges in schema public grant all on tables to postgres, anon, authenticated, service_role;
    alter default privileges in schema public grant all on functions to postgres, anon, authenticated, service_role;
    alter default privileges in schema public grant all on sequences to postgres, anon, authenticated, service_role;

    -- Allow Extensions to be used in the API
    grant usage                     on schema extensions to postgres, anon, authenticated, service_role;

    -- Set up namespacing
    alter user supabase_admin SET search_path TO public, extensions; -- don't include the "auth" schema

    -- These are required so that the users receive grants whenever "supabase_admin" creates tables/function
    alter default privileges for user supabase_admin in schema public grant all
        on sequences to postgres, anon, authenticated, service_role;
    alter default privileges for user supabase_admin in schema public grant all
        on tables to postgres, anon, authenticated, service_role;
    alter default privileges for user supabase_admin in schema public grant all
        on functions to postgres, anon, authenticated, service_role;

    -- Set short statement/query timeouts for API roles
    alter role anon set statement_timeout = '3s';
    alter role authenticated set statement_timeout = '8s';
  02-auth-schema.sql: |
    CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION supabase_admin;

    -- auth.users definition

    CREATE TABLE auth.users (
    instance_id uuid NULL,
    id uuid NOT NULL UNIQUE,
    aud varchar(255) NULL,
    "role" varchar(255) NULL,
    email varchar(255) NULL UNIQUE,
    encrypted_password varchar(255) NULL,
    confirmed_at timestamptz NULL,
    invited_at timestamptz NULL,
    confirmation_token varchar(255) NULL,
    confirmation_sent_at timestamptz NULL,
    recovery_token varchar(255) NULL,
    recovery_sent_at timestamptz NULL,
    email_change_token varchar(255) NULL,
    email_change varchar(255) NULL,
    email_change_sent_at timestamptz NULL,
    last_sign_in_at timestamptz NULL,
    raw_app_meta_data jsonb NULL,
    raw_user_meta_data jsonb NULL,
    is_super_admin bool NULL,
    created_at timestamptz NULL,
    updated_at timestamptz NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id)
    );
    CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, email);
    CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);
    comment on table auth.users is 'Auth: Stores user login data within a secure schema.';

    -- auth.refresh_tokens definition

    CREATE TABLE auth.refresh_tokens (
    instance_id uuid NULL,
    id bigserial NOT NULL,
    "token" varchar(255) NULL,
    user_id varchar(255) NULL,
    revoked bool NULL,
    created_at timestamptz NULL,
    updated_at timestamptz NULL,
    CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id)
    );
    CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);
    CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);
    CREATE INDEX refresh_tokens_token_idx ON auth.refresh_tokens USING btree (token);
    comment on table auth.refresh_tokens is 'Auth: Store of tokens used to refresh JWT tokens once they expire.';

    -- auth.instances definition

    CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid NULL,
    raw_base_config text NULL,
    created_at timestamptz NULL,
    updated_at timestamptz NULL,
    CONSTRAINT instances_pkey PRIMARY KEY (id)
    );
    comment on table auth.instances is 'Auth: Manages users across multiple sites.';

    -- auth.audit_log_entries definition

    CREATE TABLE auth.audit_log_entries (
    instance_id uuid NULL,
    id uuid NOT NULL,
    payload json NULL,
    created_at timestamptz NULL,
    CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id)
    );
    CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);
    comment on table auth.audit_log_entries is 'Auth: Audit trail for user actions.';

    -- auth.schema_migrations definition

    CREATE TABLE auth.schema_migrations (
    "version" varchar(255) NOT NULL,
    CONSTRAINT schema_migrations_pkey PRIMARY KEY ("version")
    );
    comment on table auth.schema_migrations is 'Auth: Manages updates to the auth system.';

    INSERT INTO auth.schema_migrations (version)
    VALUES  ('20171026211738'),
            ('20171026211808'),
            ('20171026211834'),
            ('20180103212743'),
            ('20180108183307'),
            ('20180119214651'),
            ('20180125194653');

    create or replace function auth.uid() 
    returns uuid 
    language sql stable
    as $$
    select 
        coalesce(
        current_setting('request.jwt.claim.sub', true),
        (current_setting('request.jwt.claims', true)::jsonb ->> 'sub')
    )::uuid
    $$;

    create or replace function auth.role() 
    returns text 
    language sql stable
    as $$
    select 
        coalesce(
        current_setting('request.jwt.claim.role', true),
        (current_setting('request.jwt.claims', true)::jsonb ->> 'role')
    )::text
    $$;

    create or replace function auth.email() 
    returns text 
    language sql stable
    as $$
    select 
        coalesce(
        current_setting('request.jwt.claim.email', true),
        (current_setting('request.jwt.claims', true)::jsonb ->> 'email')
    )::text
    $$;

    -- usage on auth functions to API roles
    GRANT USAGE ON SCHEMA auth TO anon, authenticated, service_role;

    -- Supabase super admin
    CREATE USER supabase_auth_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    GRANT ALL PRIVILEGES ON SCHEMA auth TO supabase_auth_admin;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA auth TO supabase_auth_admin;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA auth TO supabase_auth_admin;
    ALTER USER supabase_auth_admin SET search_path = "auth";
    ALTER table "auth".users OWNER TO supabase_auth_admin;
    ALTER table "auth".refresh_tokens OWNER TO supabase_auth_admin;
    ALTER table "auth".audit_log_entries OWNER TO supabase_auth_admin;
    ALTER table "auth".instances OWNER TO supabase_auth_admin;
    ALTER table "auth".schema_migrations OWNER TO supabase_auth_admin;

    ALTER FUNCTION "auth"."uid" OWNER TO supabase_auth_admin;
    ALTER FUNCTION "auth"."role" OWNER TO supabase_auth_admin;
    ALTER FUNCTION "auth"."email" OWNER TO supabase_auth_admin;
    GRANT EXECUTE ON FUNCTION "auth"."uid"() TO PUBLIC;
    GRANT EXECUTE ON FUNCTION "auth"."role"() TO PUBLIC;
    GRANT EXECUTE ON FUNCTION "auth"."email"() TO PUBLIC;

  03-storage-schema.sql: |
    CREATE SCHEMA IF NOT EXISTS storage AUTHORIZATION supabase_admin;

    grant usage on schema storage to postgres, anon, authenticated, service_role;
    alter default privileges in schema storage grant all on tables to postgres, anon, authenticated, service_role;
    alter default privileges in schema storage grant all on functions to postgres, anon, authenticated, service_role;
    alter default privileges in schema storage grant all on sequences to postgres, anon, authenticated, service_role;

    CREATE TABLE "storage"."buckets" (
        "id" text not NULL,
        "name" text NOT NULL,
        "owner" uuid,
        "created_at" timestamptz DEFAULT now(),
        "updated_at" timestamptz DEFAULT now(),
        CONSTRAINT "buckets_owner_fkey" FOREIGN KEY ("owner") REFERENCES "auth"."users"("id"),
        PRIMARY KEY ("id")
    );
    CREATE UNIQUE INDEX "bname" ON "storage"."buckets" USING BTREE ("name");

    CREATE TABLE "storage"."objects" (
        "id" uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
        "bucket_id" text,
        "name" text,
        "owner" uuid,
        "created_at" timestamptz DEFAULT now(),
        "updated_at" timestamptz DEFAULT now(),
        "last_accessed_at" timestamptz DEFAULT now(),
        "metadata" jsonb,
        CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY ("bucket_id") REFERENCES "storage"."buckets"("id"),
        CONSTRAINT "objects_owner_fkey" FOREIGN KEY ("owner") REFERENCES "auth"."users"("id"),
        PRIMARY KEY ("id")
    );
    CREATE UNIQUE INDEX "bucketid_objname" ON "storage"."objects" USING BTREE ("bucket_id","name");
    CREATE INDEX name_prefix_search ON storage.objects(name text_pattern_ops);

    ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

    CREATE FUNCTION storage.foldername(name text)
    RETURNS text[]
    LANGUAGE plpgsql
    AS $function$
    DECLARE
    _parts text[];
    BEGIN
    select string_to_array(name, '/') into _parts;
    return _parts[1:array_length(_parts,1)-1];
    END
    $function$;

    CREATE FUNCTION storage.filename(name text)
    RETURNS text
    LANGUAGE plpgsql
    AS $function$
    DECLARE
    _parts text[];
    BEGIN
    select string_to_array(name, '/') into _parts;
    return _parts[array_length(_parts,1)];
    END
    $function$;

    CREATE FUNCTION storage.extension(name text)
    RETURNS text
    LANGUAGE plpgsql
    AS $function$
    DECLARE
    _parts text[];
    _filename text;
    BEGIN
    select string_to_array(name, '/') into _parts;
    select _parts[array_length(_parts,1)] into _filename;
    -- @todo return the last part instead of 2
    return split_part(_filename, '.', 2);
    END
    $function$;

    CREATE FUNCTION storage.search(prefix text, bucketname text, limits int DEFAULT 100, levels int DEFAULT 1, offsets int DEFAULT 0)
    RETURNS TABLE (
        name text,
        id uuid,
        updated_at TIMESTAMPTZ,
        created_at TIMESTAMPTZ,
        last_accessed_at TIMESTAMPTZ,
        metadata jsonb
    )
    LANGUAGE plpgsql
    AS $function$
    DECLARE
    _bucketId text;
    BEGIN
        -- will be replaced by migrations when server starts
        -- saving space for cloud-init
    END
    $function$;

    -- create migrations table
    -- https://github.com/ThomWright/postgres-migrations/blob/master/src/migrations/0_create-migrations-table.sql
    -- we add this table here and not let it be auto-created so that the permissions are properly applied to it
    CREATE TABLE IF NOT EXISTS storage.migrations (
    id integer PRIMARY KEY,
    name varchar(100) UNIQUE NOT NULL,
    hash varchar(40) NOT NULL, -- sha1 hex encoded hash of the file name and contents, to ensure it hasn't been altered since applying the migration
    executed_at timestamp DEFAULT current_timestamp
    );

    CREATE USER supabase_storage_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    GRANT ALL PRIVILEGES ON SCHEMA storage TO supabase_storage_admin;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA storage TO supabase_storage_admin;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA storage TO supabase_storage_admin;
    ALTER USER supabase_storage_admin SET search_path = "storage";
    ALTER table "storage".objects owner to supabase_storage_admin;
    ALTER table "storage".buckets owner to supabase_storage_admin;
    ALTER table "storage".migrations OWNER TO supabase_storage_admin;
    ALTER function "storage".foldername(text) owner to supabase_storage_admin;
    ALTER function "storage".filename(text) owner to supabase_storage_admin;
    ALTER function "storage".extension(text) owner to supabase_storage_admin;
    ALTER function "storage".search(text,text,int,int,int) owner to supabase_storage_admin;

  04-post-setup.sql: |
    ALTER ROLE postgres SET search_path TO "\$user",public,extensions;
    CREATE OR REPLACE FUNCTION extensions.notify_api_restart()
    RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        NOTIFY ddl_command_end;
    END;
    $$;
    CREATE EVENT TRIGGER api_restart ON ddl_command_end
    EXECUTE PROCEDURE extensions.notify_api_restart();
    COMMENT ON FUNCTION extensions.notify_api_restart IS 'Sends a notification to the API to restart. If your database schema has changed, this is required so that Supabase can rebuild the relationships.';

    -- Trigger for pg_cron
    CREATE OR REPLACE FUNCTION extensions.grant_pg_cron_access()
    RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
    DECLARE
    schema_is_cron bool;
    BEGIN
    schema_is_cron = (
        SELECT n.nspname = 'cron'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_namespace AS n
        ON ev.objid = n.oid
    );

    IF schema_is_cron
    THEN
        grant usage on schema cron to postgres with grant option;

        alter default privileges in schema cron grant all on tables to postgres with grant option;
        alter default privileges in schema cron grant all on functions to postgres with grant option;
        alter default privileges in schema cron grant all on sequences to postgres with grant option;

        alter default privileges for user supabase_admin in schema cron grant all
            on sequences to postgres with grant option;
        alter default privileges for user supabase_admin in schema cron grant all
            on tables to postgres with grant option;
        alter default privileges for user supabase_admin in schema cron grant all
            on functions to postgres with grant option;

        grant all privileges on all tables in schema cron to postgres with grant option; 

    END IF;

    END;
    $$;
    CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end WHEN TAG in ('CREATE SCHEMA')
    EXECUTE PROCEDURE extensions.grant_pg_cron_access();
    COMMENT ON FUNCTION extensions.grant_pg_cron_access IS 'Grants access to pg_cron';

    -- Supabase dashboard user
    CREATE ROLE dashboard_user NOSUPERUSER CREATEDB CREATEROLE REPLICATION;
    GRANT ALL ON DATABASE postgres TO dashboard_user;
    GRANT ALL ON SCHEMA auth TO dashboard_user;
    GRANT ALL ON SCHEMA extensions TO dashboard_user;
    GRANT ALL ON SCHEMA storage TO dashboard_user;
    GRANT ALL ON ALL TABLES IN SCHEMA auth TO dashboard_user;
    GRANT ALL ON ALL TABLES IN SCHEMA extensions TO dashboard_user;
    -- GRANT ALL ON ALL TABLES IN SCHEMA storage TO dashboard_user;
    GRANT ALL ON ALL SEQUENCES IN SCHEMA auth TO dashboard_user;
    GRANT ALL ON ALL SEQUENCES IN SCHEMA storage TO dashboard_user;
    GRANT ALL ON ALL SEQUENCES IN SCHEMA extensions TO dashboard_user;
    GRANT ALL ON ALL ROUTINES IN SCHEMA auth TO dashboard_user;
    GRANT ALL ON ALL ROUTINES IN SCHEMA storage TO dashboard_user;
    GRANT ALL ON ALL ROUTINES IN SCHEMA extensions TO dashboard_user;
---
# Source: supabase/templates/kong/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-kong
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  KONG_DATABASE: "off"
  KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
  KONG_DNS_ORDER: LAST,A,CNAME
  KONG_PLUGINS: request-transformer,cors,key-auth,acl
  kong.yml: >-
    _format_version: "1.1"

    consumers:
      - username: anon
        keyauth_credentials:
          - key: 
      - username: service_role
        keyauth_credentials:
          - key: 

    acls:
      - consumer: anon
        group: anon
      - consumer: service_role
        group: admin

    services:
      - name: auth-v1-open
        url: http://supabase-supabase-auth.supabase.svc.cluster.local:9999/verify
        routes:
          - name: auth-v1-open
            strip_path: true
            paths:
              - /auth/v1/verify
        plugins:
          - name: cors
      - name: auth-v1-open-callback
        url: http://supabase-supabase-auth.supabase.svc.cluster.local:9999/callback
        routes:
          - name: auth-v1-open-callback
            strip_path: true
            paths:
              - /auth/v1/callback
        plugins:
          - name: cors
      - name: auth-v1-open-authorize
        url: http://supabase-supabase-auth.supabase.svc.cluster.local:9999/authorize
        routes:
          - name: auth-v1-open-authorize
            strip_path: true
            paths:
              - /auth/v1/authorize
        plugins:
          - name: cors


      - name: auth-v1
        _comment: "GoTrue: /auth/v1/* -> http://supabase-supabase-auth.supabase.svc.cluster.local:9999/*"
        url: http://supabase-supabase-auth.supabase.svc.cluster.local:9999
        routes:
          - name: auth-v1-all
            strip_path: true
            paths:
              - /auth/v1/
        plugins:
          - name: cors
          - name: key-auth
            config:
              hide_credentials: false
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
                - anon


      - name: rest-v1
        _comment: "PostgREST: /rest/v1/* -> http://supabase-supabase-rest.supabase:3000/*"
        url: http://supabase-supabase-rest.supabase:3000/
        routes:
          - name: rest-v1-all
            strip_path: true
            paths:
              - /rest/v1/
        plugins:
          - name: cors
          - name: key-auth
            config:
              hide_credentials: true
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
                - anon

      - name: realtime-v1
        _comment: "Realtime: /realtime/v1/* -> ws://supabase-supabase-realtime.supabase.svc.cluster.local:4000/socket/*"
        url: http://supabase-supabase-realtime.supabase.svc.cluster.local:4000/socket
        routes:
          - name: realtime-v1-all
            strip_path: true
            paths:
              - /realtime/v1/
        plugins:
          - name: cors
          - name: key-auth
            config:
              hide_credentials: false
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
                - anon

      - name: storage-v1
        _comment: "Storage: /storage/v1/* -> http://supabase-supabase-storage.supabase.svc.cluster.local:5000/*"
        url: http://supabase-supabase-storage.supabase.svc.cluster.local:5000/
        routes:
          - name: storage-v1-all
            strip_path: true
            paths:
              - /storage/v1/
        plugins:
          - name: cors

      - name: meta
        _comment: "pg-meta: /pg/* -> http://supabase-supabase-meta.supabase.svc.cluster.local:8080/*"
        url: http://supabase-supabase-meta.supabase.svc.cluster.local:8080/
        routes:
          - name: meta-all
            strip_path: true
            paths:
              - /pg/
        plugins:
          - name: key-auth
            config:
              hide_credentials: false
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
---
# Source: supabase/templates/meta/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-meta
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  PG_META_DB_HOST: supabase-database.supabase.svc.cluster.local
  PG_META_DB_PASSWORD: PostGreSQL!@#123
  PG_META_PORT: "8080"
---
# Source: supabase/templates/realtime/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-realtime
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  DB_HOST: supabase-database.supabase.svc.cluster.local
  DB_NAME: postgres
  DB_PASSWORD: PostGreSQL!@#123
  DB_PORT: "5432"
  DB_SSL: "false"
  DB_USER: postgres
  JWT_SECRET: sTfSgSSCi80zJvdQugIg6S8Cd8klthKt0okIk27rN7muBH5Q59nh8+ribSep4+F+NlVMhZreh9BFxqZNah7KpQ==
  PORT: "4000"
  REPLICATION_MODE: RLS
  REPLICATION_POLL_INTERVAL: "100"
  SECURE_CHANNELS: "true"
  SLOT_NAME: supabase_realtime_rls
  TEMPORARY_SLOT: "true"
---
# Source: supabase/templates/rest/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-rest
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  PGRST_DB_ANON_ROLE: anon
  PGRST_DB_SCHEMA: public,storage
  PGRST_DB_URI: postgres://postgres:PostGreSQL!@#123@supabase-database.supabase.svc.cluster.local:5432/postgres
  PGRST_DB_USE_LEGACY_GUCS: "false"
  PGRST_JWT_SECRET: sTfSgSSCi80zJvdQugIg6S8Cd8klthKt0okIk27rN7muBH5Q59nh8+ribSep4+F+NlVMhZreh9BFxqZNah7KpQ==
---
# Source: supabase/templates/storage/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-storage
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UiLAogICAgImlhdCI6IDE2NjEyMDIwMDAsCiAgICAiZXhwIjogMTgxODk2ODQwMAp9.MThJSRY_lgzgwur9Qqr1SQfVB8AO-E_y0-V6AvKdFlI
  DATABASE_URL: postgres://postgres:PostGreSQL!@#123@supabase-database.supabase.svc.cluster.local:5432/postgres
  FILE_SIZE_LIMIT: "52428800"
  FILE_STORAGE_BACKEND_PATH: /var/lib/storage
  GLOBAL_S3_BUCKET: stub
  PGOPTIONS: -c search_path=storage,public
  PGRST_JWT_SECRET: sTfSgSSCi80zJvdQugIg6S8Cd8klthKt0okIk27rN7muBH5Q59nh8+ribSep4+F+NlVMhZreh9BFxqZNah7KpQ==
  POSTGREST_URL: http://supabase-rest.supabase.svc.cluster.local:3000
  REGION: stub
  SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZSIsCiAgICAiaWF0IjogMTY2MTIwMjAwMCwKICAgICJleHAiOiAxODE4OTY4NDAwCn0.91l79tCG8D1Tq0Qa_pNKX7aze2bPQIUnmql-IUCEH_Q
  STORAGE_BACKEND: file
  TENANT_ID: stub
---
# Source: supabase/templates/studio/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-supabase-studio
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
data:
  STUDIO_PG_META_URL: http://supabase-kong.supabase.svc.cluster.local:8000/pg
  SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UiLAogICAgImlhdCI6IDE2NjEyMDIwMDAsCiAgICAiZXhwIjogMTgxODk2ODQwMAp9.MThJSRY_lgzgwur9Qqr1SQfVB8AO-E_y0-V6AvKdFlI
  SUPABASE_SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZSIsCiAgICAiaWF0IjogMTY2MTIwMjAwMCwKICAgICJleHAiOiAxODE4OTY4NDAwCn0.91l79tCG8D1Tq0Qa_pNKX7aze2bPQIUnmql-IUCEH_Q
  SUPABASE_URL: http://api.localhost
---
# Source: supabase/templates/storage/volume.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: supabase-supabase-storage
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  storageClassName: csi-disk
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: supabase/charts/database/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-database-headless
  labels:
    app.kubernetes.io/name: database
    helm.sh/chart: database-10.13.15
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: supabase
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: database
    app.kubernetes.io/instance: supabase
---
# Source: supabase/charts/database/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-database
  labels:
    app.kubernetes.io/name: database
    helm.sh/chart: database-10.13.15
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: supabase
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: database
    app.kubernetes.io/instance: supabase
    role: primary
---
# Source: supabase/templates/auth/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-auth
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9999
      targetPort: 9999
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-auth
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/kong/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-kong
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-kong
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/meta/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-meta
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-meta
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/realtime/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-realtime
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: 4000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-realtime
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/rest/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-rest
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-rest
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/storage/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-storage
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-storage
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/studio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supabase-studio
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supabase-studio
    app.kubernetes.io/instance: supabase
---
# Source: supabase/templates/auth/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-auth
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-auth
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-auth
        app.kubernetes.io/instance: supabase
    spec:
      serviceAccountName: supabase-supabase-auth
      securityContext:
        {}
      containers:
        - name: supabase-auth
          securityContext:
            {}
          image: "supabase/gotrue:v2.2.12"
          imagePullPolicy: IfNotPresent
          env:
            - name: GOTRUE_API_HOST
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_API_HOST
            - name: GOTRUE_API_PORT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_API_PORT
            - name: GOTRUE_DB_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_DB_DATABASE_URL
            - name: GOTRUE_DB_DRIVER
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_DB_DRIVER
            - name: GOTRUE_DISABLE_SIGNUP
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_DISABLE_SIGNUP
            - name: GOTRUE_EXTERNAL_EMAIL_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_EXTERNAL_EMAIL_ENABLED
            - name: GOTRUE_EXTERNAL_PHONE_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_EXTERNAL_PHONE_ENABLED
            - name: GOTRUE_JWT_DEFAULT_GROUP_NAME
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_JWT_DEFAULT_GROUP_NAME
            - name: GOTRUE_JWT_EXP
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_JWT_EXP
            - name: GOTRUE_JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_JWT_SECRET
            - name: GOTRUE_MAILER_AUTOCONFIRM
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_MAILER_AUTOCONFIRM
            - name: GOTRUE_MAILER_URLPATHS_CONFIRMATION
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_MAILER_URLPATHS_CONFIRMATION
            - name: GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE
            - name: GOTRUE_MAILER_URLPATHS_INVITE
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_MAILER_URLPATHS_INVITE
            - name: GOTRUE_MAILER_URLPATHS_RECOVERY
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_MAILER_URLPATHS_RECOVERY
            - name: GOTRUE_SITE_URL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SITE_URL
            - name: GOTRUE_SMS_AUTOCONFIRM
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMS_AUTOCONFIRM
            - name: GOTRUE_SMTP_ADMIN_EMAIL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMTP_ADMIN_EMAIL
            - name: GOTRUE_SMTP_HOST
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMTP_HOST
            - name: GOTRUE_SMTP_PASS
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMTP_PASS
            - name: GOTRUE_SMTP_PORT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMTP_PORT
            - name: GOTRUE_SMTP_SENDER_NAME
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMTP_SENDER_NAME
            - name: GOTRUE_SMTP_USER
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_SMTP_USER
            - name: GOTRUE_URI_ALLOW_LIST
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-auth
                  key: GOTRUE_URI_ALLOW_LIST
          ports:
            - name: http
              containerPort: 9999
              protocol: TCP
          resources:
            {}
---
# Source: supabase/templates/kong/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-kong
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-kong
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-kong
        app.kubernetes.io/instance: supabase
    spec:
      serviceAccountName: supabase-supabase-kong
      securityContext:
        {}
      containers:
        - name: supabase-kong
          securityContext:
            {}
          image: "kong:2.1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config-volume
              mountPath: /var/lib/kong/kong.yml
              subPath: kong.yml
          env:
            - name: KONG_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-kong
                  key: KONG_DATABASE
            - name: KONG_DECLARATIVE_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-kong
                  key: KONG_DECLARATIVE_CONFIG
            - name: KONG_DNS_ORDER
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-kong
                  key: KONG_DNS_ORDER
            - name: KONG_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-kong
                  key: KONG_PLUGINS
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          resources:
            {}
      volumes:
        - name: config-volume
          configMap:
            name: supabase-supabase-kong
            items:
            - key: kong.yml
              path: kong.yml
---
# Source: supabase/templates/meta/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-meta
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-meta
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-meta
        app.kubernetes.io/instance: supabase
    spec:
      serviceAccountName: supabase-supabase-meta
      securityContext:
        {}
      containers:
        - name: supabase-meta
          securityContext:
            {}
          image: "supabase/postgres-meta:v0.29.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: PG_META_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-meta
                  key: PG_META_DB_HOST
            - name: PG_META_DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-meta
                  key: PG_META_DB_PASSWORD
            - name: PG_META_PORT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-meta
                  key: PG_META_PORT
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
---
# Source: supabase/templates/realtime/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-realtime
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-realtime
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-realtime
        app.kubernetes.io/instance: supabase
    spec:
      serviceAccountName: supabase-supabase-realtime
      securityContext:
        {}
      containers:
        - name: supabase-realtime
          securityContext:
            {}
          image: "supabase/realtime:v0.19.3"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate && ./prod/rel/realtime/bin/realtime start"]
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: DB_HOST
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: DB_NAME
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: DB_PASSWORD
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: DB_PORT
            - name: DB_SSL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: DB_SSL
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: DB_USER
            - name: JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: JWT_SECRET
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: PORT
            - name: REPLICATION_MODE
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: REPLICATION_MODE
            - name: REPLICATION_POLL_INTERVAL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: REPLICATION_POLL_INTERVAL
            - name: SECURE_CHANNELS
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: SECURE_CHANNELS
            - name: SLOT_NAME
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: SLOT_NAME
            - name: TEMPORARY_SLOT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-realtime
                  key: TEMPORARY_SLOT
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          resources:
            {}
---
# Source: supabase/templates/rest/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-rest
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-rest
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-rest
        app.kubernetes.io/instance: supabase
    spec:
      serviceAccountName: supabase-supabase-rest
      securityContext:
        {}
      containers:
        - name: supabase-rest
          securityContext:
            {}
          image: "postgrest/postgrest:v9.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGRST_DB_ANON_ROLE
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-rest
                  key: PGRST_DB_ANON_ROLE
            - name: PGRST_DB_SCHEMA
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-rest
                  key: PGRST_DB_SCHEMA
            - name: PGRST_DB_URI
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-rest
                  key: PGRST_DB_URI
            - name: PGRST_DB_USE_LEGACY_GUCS
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-rest
                  key: PGRST_DB_USE_LEGACY_GUCS
            - name: PGRST_JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-rest
                  key: PGRST_JWT_SECRET
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            {}
---
# Source: supabase/templates/storage/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-storage
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-storage
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-storage
        app.kubernetes.io/instance: supabase
    spec:
      restartPolicy: Always
      serviceAccountName: supabase-supabase-storage
      securityContext:
        {}
      containers:
        - name: supabase-storage
          securityContext:
            {}
          image: "supabase/storage-api:v0.10.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: ANON_KEY
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: ANON_KEY
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: DATABASE_URL
            - name: FILE_SIZE_LIMIT
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: FILE_SIZE_LIMIT
            - name: FILE_STORAGE_BACKEND_PATH
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: FILE_STORAGE_BACKEND_PATH
            - name: GLOBAL_S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: GLOBAL_S3_BUCKET
            - name: PGOPTIONS
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: PGOPTIONS
            - name: PGRST_JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: PGRST_JWT_SECRET
            - name: POSTGREST_URL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: POSTGREST_URL
            - name: REGION
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: REGION
            - name: SERVICE_KEY
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: SERVICE_KEY
            - name: STORAGE_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: STORAGE_BACKEND
            - name: TENANT_ID
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-storage
                  key: TENANT_ID
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - mountPath: /var/lib/storage
              name: storage-data
      volumes:
        - name: storage-data
          persistentVolumeClaim:
            claimName: supabase-supabase-storage
---
# Source: supabase/templates/studio/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-supabase-studio
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-studio
      app.kubernetes.io/instance: supabase
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-studio
        app.kubernetes.io/instance: supabase
    spec:
      serviceAccountName: supabase-supabase-studio
      securityContext:
        {}
      containers:
        - name: supabase-studio
          securityContext:
            {}
          image: "supabase/studio:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: STUDIO_PG_META_URL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-studio
                  key: STUDIO_PG_META_URL
            - name: SUPABASE_ANON_KEY
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-studio
                  key: SUPABASE_ANON_KEY
            - name: SUPABASE_SERVICE_KEY
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-studio
                  key: SUPABASE_SERVICE_KEY
            - name: SUPABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: supabase-supabase-studio
                  key: SUPABASE_URL
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            {}
---
# Source: supabase/charts/database/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: supabase-database
  labels:
    app.kubernetes.io/name: database
    helm.sh/chart: database-10.13.15
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: supabase
spec:
  serviceName: supabase-database-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: database
      app.kubernetes.io/instance: supabase
      role: primary
  template:
    metadata:
      name: supabase-database
      labels:
        app.kubernetes.io/name: database
        helm.sh/chart: database-10.13.15
        app.kubernetes.io/instance: supabase
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: database
                    app.kubernetes.io/instance: supabase
                    app.kubernetes.io/component: primary
                namespaces:
                  - "supabase"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: supabase-database
          image: docker.io/tdeoliv/supabase-bitnami-postgres:latest
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 0
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "PostGreSQL123"
            - name: POSTGRESQL_WAL_LEVEL
              value: LOGICAL
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: supabase-initdb
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: csi-disk
---
# Source: supabase/templates/kong/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: supabase-supabase-kong
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/elb.port: "80"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: "api.localhost"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: supabase-supabase-kong
                port:
                  number: 8000
---
# Source: supabase/templates/studio/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: supabase-supabase-studio
  labels:
    helm.sh/chart: supabase-0.0.2
    app.kubernetes.io/name: supabase
    app.kubernetes.io/instance: supabase
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/elb.port: "80"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: "studio.localhost"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: supabase-supabase-studio
                port:
                  number: 3000
